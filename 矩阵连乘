void MatrixChain(int *p, int n, int **m, int **s) {
    // p[] 数组包含矩阵的维度，n 是矩阵的个数
    // m[][] 数组将存储所需的最小数量的标量乘法
    // s[][] 数组将存储计算所需的最小数量的标量乘法时的索引
    
    // 初始化 m[][] 对角线元素为 0
    for (int i=1; i <= n; i++)
        m[i][i]=0;
        
    // r 表示矩阵链长度
    // 外循环确定要考虑的矩阵链的长度
    for (int r=2; r <= n; r++) {
    
        // i 表示矩阵链的起始矩阵
        // 内循环确定要考虑的矩阵链的起始矩阵
        for (int i=1; i <= n-r+1; i++) {
        
            // j 表示矩阵链的结束矩阵
            int j = i+r-1;
            
            // 将标量乘法的最小数量初始化为仅计算前两个矩阵的代价
            m[i][j] = m[i+1][j] + p[i-1]*p[i]*p[j];
            
            // 记录最小值出现的索引
            s[i][j] = i;
            
            // k 表示在矩阵链中分割矩阵的位置
            // 找到分割位置，使得计算两个子矩阵的代价最小
            for (int k=i+1; k < j; k++) {
                int t = m[i][k]+m[k+1][j] + p[i-1]*p[k]*p[j];
                if (t<m[i][j]) {
                    m[i][j] = t;
                    s[i][j] = k;
                }
            }
        }
    }
}
