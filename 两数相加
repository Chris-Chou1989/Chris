struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2)
{
    int a = 0;
    struct ListNode *temp1 = l1;
    struct ListNode *temp2 = l2;
    struct ListNode *head = NULL;
    while(temp1||temp2)
    {
        struct ListNode *l3 = (struct ListNode*)malloc(sizeof(struct ListNode));
        struct ListNode *temp3 = head;
        if(temp1->val + temp2->val >= 10)
        {
            l3-> val = (temp1->val + temp2->val) - 10;
            l3 -> next = NULL;
            if(l3!=NULL)
            {
                l3->next=head;
                head = l3;
            }
            while(temp3)
            {
                temp3 = temp3->next;
            }
            temp3 = l3;
            a++;
        }else l3-> val = temp1->val + temp2->val;
            l3 -> next = NULL;
                if(l3!=NULL)
                {
                    l3->next=head;
                    head =l3;
                }
                while(temp3)
                {
                    temp3 = temp3->next;
                }
                temp3 = l3;
                
        if(temp1 == NULL)
        {        
        temp2 = temp2->next;}
        else if(temp2 == NULL)
        {        
        temp1 = temp1->next;}
        else {
            temp1=temp1->next;
            temp2=temp2->next;
        }
 
    }
    return head;
}


//上面是错误示范，自己写的 

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2)
{
    int carry = 0;  // 进位值
    struct ListNode *temp1 = l1;  // 指向 l1 的指针
    struct ListNode *temp2 = l2;  // 指向 l2 的指针
    struct ListNode *head = NULL;  // 指向结果链表的头结点
    struct ListNode *prev = NULL;  // 指向结果链表的当前节点的前一个节点

    // 循环直到 l1 和 l2 都遍历完且没有进位
    while(temp1 || temp2 || carry)
    {
        // 获取 l1 和 l2 当前节点的值
        int val1 = temp1 ? temp1->val : 0;//如果 temp1 不为空（也就是指向一个对象），那么就把 temp1->val 的值赋给 val1；否则，将 0 赋给 val1。
        int val2 = temp2 ? temp2->val : 0;
        int sum = val1 + val2 + carry;  // 求和

        carry = sum / 10;  // 更新进位值
        struct ListNode *newNode = (struct ListNode*)malloc(sizeof(struct ListNode));  // 创建新节点
        newNode->val = sum % 10;  // 计算新节点的值
        newNode->next = NULL;  // 新节点的 next 指针初始化为 NULL

        // 如果 prev 为 NULL，表示当前节点是链表的第一个节点，将 head 指向该节点
        // 否则将 prev 的 next 指针指向当前节点
        if (prev == NULL)
        {
            head = newNode;
        }
        else
        {
            prev->next = newNode;
        }

        prev = newNode;  // 更新 prev 指针为当前节点

        // 如果 l1 和 l2 还有节点未遍历，将指针移动到下一个节点
        if (temp1 != NULL)
        {
            temp1 = temp1->next;
        }

        if (temp2 != NULL)
        {
            temp2 = temp2->next;
        }
    }

    return head;  // 返回结果链表的头结点
}
该函数的作用是将两个链表 l1 和 l2 中存储的两个非负整数相加，
并返回结果链表的头结点。每个节点表示一个数位，并且它们是逆序
存储的，即第一个节点表示最低位，最后一个节点表示最高位。该函
数使用了链表的基本操作，包括遍历、创建新节点、添加节点到链表
等。同时，还使用了进位值的概念，处理相加结果大于 10 的情况。

//这是chatgpt写的正确答案
